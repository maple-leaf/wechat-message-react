{"version":3,"file":"static/webpack/static/development/pages/index.js.ce40763536bfd9d17f17.hot-update.js","sources":["webpack:///./components/system-message.tsx","webpack:///./components/wechat-message-bridge.tsx"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { Role } from './wechat-message';\nimport styled from 'styled-components';\n\nexport interface IEnvelopeMessage {\n    takeBy: string,\n    envelopeId: number,\n    type: string,\n    role: Role.system,\n}\nexport interface EnvelopeMessageProps {\n    message: IEnvelopeMessage,\n    className?: string,\n}\n\nconst StyledEnvelopeMessage = styled.div`\n    font-size: 12px;\n    color: #000;\n    background: rgba(255, 255, 255, 0.5);\n    height: 30px;\n    display: flex;\n    align-items: center;\n    padding: 0 12px;\n`;\n\nconst StyledEnvelopeLink = styled.div`\n    color: #FF9800;\n    margin-left: 2px;\n`;\n\n// Á∫¢ÂåÖË¢´È¢ÜÈÄöÁü•\nconst RedEnvelope = ({ takeBy, envelopeId }: EnvelopeMessageProps) => {\n    return (\n        <StyledEnvelopeMessage>\n            üßß {takeBy} È¢ÜÂèñ‰∫Ü‰Ω†ÁöÑ <StyledEnvelopeLink href={'#' + envelopeId}></StyledEnvelopeLink>\n        </StyledEnvelopeMessage>\n    )\n}\n\nconst SystemMessage = ({ message }: SystemMessageProps):React.ReactElement => {\n    switch(messsage.type){\n        case 'envelope':\n            return <RedEnvelope message={message}/>\n        default:\n        return null;\n    }\n}\n\nexport default SystemMessage;\n","import styled from 'styled-components';\nimport WeChatMessage, { MessageProps } from \"./wechat-message\";\nimport LinkMessage, { LinkMessageProps, ILinkMessage } from \"./link-message\";\nimport VoteMessage from './vote-message';\nimport ImageMessage, { IImageMessage } from './image-message';\nimport SystemMessage from './system-message';\nimport useEmojiRain from './emoji-rain';\nimport AvatarWithVideoMark from \"./avatar-with-video-mark\";\n\ntype Props = MessageProps | LinkMessageProps;\n\nconst MessageBridge = ({ className, message }: Props): React.ReactElement => {\n    let renderFn;\n    let onClick;\n\n    if (message.role === Role.system) {\n        renderFn = () => <SystemMessage message={message} />;\n    }\n    else {\n        switch(message.type) {\n            case 'link':\n                renderFn = () => <LinkMessage message={message as ILinkMessage} />;\n                onClick = () => alert((message as ILinkMessage).url);\n            break;\n            case 'vote':\n                renderFn = () => <VoteMessage message={message}/>;\n            break;\n            case 'image':\n                renderFn = () => <ImageMessage message={message as IImageMessage}/>\n            break;\n            default:\n            break;\n        }\n    }\n\n    const emojiRainRender = useEmojiRain(message.content);\n\n    const defaultRender = () => \n                           <WeChatMessage\n                               className={className}\n                               onClick={onClick}\n                               message={message}\n                               render={renderFn}\n                               messagePostfix={AvatarWithVideoMark}\n                           />;\n\n    return emojiRainRender ? emojiRainRender(defaultRender) : defaultRender();\n}\n\nconst StyledMessageBridge = styled(MessageBridge)`\n    margin-bottom: 14px;\n    min-width: ${props => props.message.type === 'normal' ? '80px' : '120px'};\n`;\n\nexport default StyledMessageBridge;\n"],"mappings":";;;;;;;;;;;;;;;;AAEA;AAaA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAJA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;;;;A","sourceRoot":""}