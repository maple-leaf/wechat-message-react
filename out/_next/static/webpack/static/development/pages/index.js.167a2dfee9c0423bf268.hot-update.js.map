{"version":3,"file":"static/webpack/static/development/pages/index.js.167a2dfee9c0423bf268.hot-update.js","sources":["webpack:///./components/image-message.tsx","webpack:///./components/wechat-message-bridge.tsx"],"sourcesContent":["import { Role } from './wechat-message';\nimport styled from 'styled-components';\n\nexport interface IImageMessage {\n    thumbnail: string,\n    image: string,\n    type: 'image',\n    role: Role,\n}\nexport interface ImageMessageProps {\n    message: IImageMessage,\n    className?: string,\n}\n\nconst StyledImageMessageThumb = styled.img`\n    max-width: 60px;\n`;\n\nconst ImageMessage = ({ message }: ImageMessageProps):React.ReactElement => {\n    return (\n        <StyledImageMessageThumb src={message.thumbnail} onClick={() => alert('x')}/>\n    )\n}\n\nexport default ImageMessage;\n","import styled from 'styled-components';\nimport WeChatMessage, { MessageProps } from \"./wechat-message\";\nimport LinkMessage, { LinkMessageProps, ILinkMessage } from \"./link-message\";\nimport VoteMessage from './vote-message';\nimport ImageMessage, { IImageMessage } from './image-message';\nimport useEmojiRain from './emoji-rain';\nimport AvatarWithVideoMark from \"./avatar-with-video-mark\";\n\ntype Props = MessageProps | LinkMessageProps;\n\nconst MessageBridge = ({ className, message }: Props): React.ReactElement => {\n    let renderFn;\n    let onClick;\n\n    switch(message.type) {\n        case 'link':\n            renderFn = () => <LinkMessage message={message as ILinkMessage} />;\n            onClick = () => alert((message as ILinkMessage).url);\n            break;\n        case 'vote':\n            renderFn = () => <VoteMessage message={message}/>;\n            break;\n        case 'image':\n            renderFn = () => <ImageMessage message={message as IImageMessage}/>\n        default:\n            break;\n    }\n\n    const emojiRainRender = useEmojiRain(message.content);\n\n    const defaultRender = () => \n                           <WeChatMessage\n                               className={className}\n                               onClick={onClick}\n                               message={message}\n                               render={renderFn}\n                               messagePostfix={AvatarWithVideoMark}\n                           />;\n\n    return emojiRainRender ? emojiRainRender(defaultRender) : defaultRender();\n}\n\nconst StyledMessageBridge = styled(MessageBridge)`\n    margin-bottom: 14px;\n    min-width: ${props => props.message.type === 'normal' ? '80px' : '120px'};\n`;\n\nexport default StyledMessageBridge;\n"],"mappings":";;;;;;;;;;;;;;;;AACA;AAaA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAXA;AACA;AAaA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;;;;A","sourceRoot":""}